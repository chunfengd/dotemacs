#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes :comments org

#+TITLE: Emacs Configuration File
#+AUTHOR: Chunfeng Dai

# Adapted from Lars Tveito's and Tianxiang Xiong's excellent
# configuration files.
# See:
#   - https://github.com/larstvei/dot-emacs/blob/master/init.org
#   - https://github.com/xiongtx/.emacs.d/blob/master/init.org

* Table of Contents                                                     :TOC:
- [[#introduction][introduction]]
  - [[#other-references][other references]]
- [[#dotemacs-path][dotemacs path]]
  - [[#define-mypath][define =my/path=]]
  - [[#extra-load-path][extra load path]]
- [[#how-to-install][how to install]]
  - [[#tangle-via-org-mode][tangle via org mode]]
  - [[#tangle-via-command-line][tangle via command line]]
  - [[#automatic-tangling][automatic tangling]]
  - [[#add-the-following-line-into-emacsdinitel][add the following line into =~/.emacs.d/init.el=]]
  - [[#install-icons][install icons]]
- [[#straight-deprecated][straight (deprecated)]]
  - [[#add-the-following-line-into-emacsdearly-initel][add the following line into =~/.emacs.d/early-init.el=]]
  - [[#install][install]]
  - [[#configure-use-package-to-use-straight][configure use-package to use straight]]
- [[#package-management][package management]]
  - [[#package-init][package init]]
  - [[#use-package][use-package]]
  - [[#install-packages-manually][install packages manually]]
  - [[#quelpa][quelpa]]
- [[#basic-ui][basic ui]]
  - [[#about-me][about me]]
  - [[#basic][basic]]
  - [[#speed-bar][speed bar]]
  - [[#customized-util-functions--bindings][customized util functions & bindings]]
  - [[#misc][Misc]]
- [[#key-binding][key binding]]
  - [[#switch-c-c--c-g][switch C-c & C-g]]
  - [[#set-key-bindings-function][set key bindings function]]
  - [[#global-keys][global keys]]
  - [[#mac-key][mac key]]
  - [[#evil][evil]]
  - [[#evil-collection][evil-collection]]
  - [[#which-key][which-key]]
  - [[#general-leader][general leader]]
  - [[#myleader-keys][my/leader-keys]]
  - [[#jump-avy][jump (avy)]]
- [[#more-ui][more ui]]
  - [[#doom-modeline][doom-modeline]]
  - [[#doom-theme][doom-theme]]
  - [[#line-number][line number]]
  - [[#parenthesis][parenthesis]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#font][font]]
  - [[#recent-files][recent files]]
  - [[#emacs-default-auto-save][emacs default auto save]]
  - [[#auto-save][auto save]]
- [[#vertico][vertico]]
  - [[#vertico-1][vertico]]
  - [[#marginalia][marginalia]]
  - [[#orderless][orderless]]
  - [[#embark][embark]]
  - [[#consult][consult]]
  - [[#consult-projectile][consult-projectile]]
- [[#projectile][projectile]]
  - [[#useful-commands][useful commands]]
- [[#company][company]]
  - [[#config][config]]
- [[#flycheck][flycheck]]
- [[#org-mode][org-mode]]
  - [[#init][init]]
  - [[#basic-config][basic config]]
  - [[#org-appear][org-appear]]
  - [[#toc-org][toc-org]]
  - [[#initial-visibility][initial visibility]]
  - [[#keys][keys]]
- [[#org-gtd][org-gtd]]
  - [[#add-agenda-files-into-emacsdinitel][add agenda files into =~/.emacs.d/init.el=]]
  - [[#agenda-hook][agenda-hook]]
  - [[#custom-agenda-commands][custom agenda commands]]
  - [[#keyword-faces][keyword faces]]
  - [[#deadline-warning-days][deadline warning days]]
- [[#shell-02][shell]]
  - [[#term-mode][term mode]]
  - [[#tm-function][tm function]]
  - [[#sh-mode][sh mode]]
  - [[#shell-mode][shell mode]]
  - [[#sh-function][sh function]]
- [[#text-mode][text-mode]]
  - [[#auto-fill][auto fill]]
- [[#lsp-deprecated][lsp (deprecated)]]
  - [[#config-1][config]]
  - [[#dap][dap]]
- [[#typescript][typescript]]
  - [[#config-2][config]]
  - [[#manual][manual]]
- [[#json-mode][json-mode]]
- [[#java][java]]
  - [[#links][links]]
  - [[#lsp-java][lsp-java]]
- [[#dired][dired]]
  - [[#key-binding-1][key binding]]
  - [[#listing-parameters][Listing Parameters]]
- [[#folding][folding]]
  - [[#main-code][main code]]
  - [[#key-binding-2][key binding]]
  - [[#example][example]]
  - [[#test][test]]
  - [[#todo][todo]]
- [[#graphviz-dot-mode][graphviz dot mode]]
- [[#html][html]]
  - [[#web-mode][web-mode]]
- [[#imenu][imenu]]
- [[#js][js]]
  - [[#node-modules-path-setup][node-modules-path-setup]]
  - [[#js-mode-deprecated-to-typescript][js-mode (deprecated to typescript)]]
  - [[#js2-mode-deprecated-to-typescript][js2-mode (deprecated to typescript)]]
- [[#spell][spell]]
- [[#tramp][tramp]]
- [[#prettier][prettier]]
- [[#plantuml][plantuml]]
- [[#todolist-03][todolist]]
  - [[#read-a-list-of-people-with-nice-emacs-config-files][read a list of people with nice emacs config files]]
  - [[#toc-org-1][toc-org]]
  - [[#magit][magit]]
- [[#license][License]]

* introduction
:PROPERTIES:
:header-args: :tangle no
:END:
This is an Emacs configuration file written in Org-mode. It is adapted
from Lars Tveito's excellent [[https://github.com/larstvei/dot-emacs/blob/master/init.org][config file]] and Tianxiang Xiong's [[https://github.com/xiongtx/.emacs.d/blob/master/init.org][config]]
on GitHub.
** other references
- https://systemcrafters.cc/
- https://github.com/daviwil/emacs-from-scratch
* dotemacs path
** define =my/path=
#+BEGIN_SRC emacs-lisp
(defvar my/dotemacs-home (file-name-directory load-file-name))

(defun my/path (path)
  (expand-file-name path my/dotemacs-home))
#+END_SRC
** extra load path
- updated from
  https://github.com/redguardtoo/emacs.d/blob/master/init.el
#+begin_src emacs-lisp
(defun my/add-site-dir (site-dir)
  "Add a directory into `load-path'."
  (setq load-path
        (append
         (delq nil
               (mapcar (lambda (dir)
                         (unless (string-match-p "^\\." dir)
                           (expand-file-name dir site-dir)))
                       (directory-files site-dir)))
         load-path)))
(my/add-site-dir (my/path "site"))
#+end_src
* how to install
After cloning from [[https://github.com/xiongtx/.emacs.d][GitHub]], there is no =init.el= file, only an
=init.org= file (this file). To produce an =init.el= file, either:
** tangle via org mode
Open =init.org= and call =M-x org-babel-tangle=, which extracts code
blocks from the current file into =init.el=
** tangle via command line
#+BEGIN_SRC sh :tangle no
$ ./tangle.sh
#+END_SRC
or
#+BEGIN_SRC sh :tangle no
$ emacs --batch \
        --eval "(require 'ob-tangle)" \
        --eval "(org-babel-tangle-file \"./init.org\")"
#+END_SRC
** automatic tangling
To avoid having to tangle manually each time a change is made, we can
add a function to =after-save-hook= to tangle the =init.org= after
saving.
#+BEGIN_SRC emacs-lisp
(defun my/tangle-init-file ()
  "Tangle the current buffer if it is the init.org file."
  (when (equal (buffer-file-name) (my/path "init.org"))
    (org-babel-tangle)))

(add-hook 'after-save-hook 'my/tangle-init-file)
#+END_SRC
** add the following line into =~/.emacs.d/init.el=
#+BEGIN_SRC emacs-lisp :tangle no
;; (load "~/dev/dotemacs/init.el")
(load "/path/to/init.el")
#+END_SRC
** install icons
Run =M-x all-the-icons-install-fonts=
* straight (deprecated)
:PROPERTIES:
:header-args: :tangle no
:END:
** add the following line into =~/.emacs.d/early-init.el=
#+begin_src emacs-lisp :tangle no
;; Disable package.el in favor of straight.el
(setq package-enable-at-startup nil)
#+end_src
** install
https://jeffkreeftmeijer.com/emacs-straight-use-package/
https://github.com/radian-software/straight.el
#+begin_src emacs-lisp
(setq straight-repository-branch "master")

;; Install straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         (format
          "%s/%s/install.el"
          "https://raw.githubusercontent.com/radian-software/straight.el"
          straight-repository-branch)
         'silent
         'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
** configure use-package to use straight
#+begin_src emacs-lisp
(straight-use-package 'use-package)
(use-package straight
  :custom
  (straight-use-package-by-default t))
#+end_src
* package management
** package init
#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(
        ;; ("melpa-stable" . "https://stable.melpa.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("org" . "http://orgmode.org/elpa/")
        ("elpa" . "https://elpa.gnu.org/packages/")
        ;; ("marmalade" . "https://marmalade-repo.org/packages/")
        ))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents nil))
#+end_src
** use-package
https://github.com/jwiegley/use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
;; make sure packages are installed
(setq use-package-always-ensure t)
#+end_src
** install packages manually
#+begin_src emacs-lisp :tangle no
;; https://github.com/melpa/melpa/issues/7238
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(package-refresh-contents nil)
(package-install 'lsp-mode)
#+end_src
** quelpa
#+begin_src emacs-lisp
(use-package quelpa)
(use-package quelpa-use-package)
(quelpa-use-package-activate-advice)
#+end_src
* basic ui
** about me
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'user-full-name "Chunfeng Dai")
;; (customize-set-variable 'user-mail-address "")
#+END_SRC
** basic
#+begin_src emacs-lisp
;; (load-theme 'wombat)
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)
(setq visible-bell t)

;; highlight current line
(global-hl-line-mode t)
(if (display-graphic-p)
    (set-face-background hl-line-face "grey20"))

(setq default-fill-column 70)

(setq-default scroll-margin 3
              scroll-conservatively 10000)

;; frame title
(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b"))))

;; frame
(when (display-graphic-p)
  (add-to-list 'default-frame-alist '(height . 42))
  (add-to-list 'default-frame-alist '(width . 85))
  (add-to-list 'default-frame-alist '(left . 650))
  (add-to-list 'default-frame-alist '(top . 100)))

(setq-default indent-tabs-mode nil)
(setq default-tab-width 8)
#+end_src
** speed bar
#+BEGIN_SRC emacs-lisp
(add-hook
 'speedbar-load-hook
 '(lambda ()
    (add-to-list 'speedbar-frame-parameters '(width . 35))
    (setq speedbar-show-unknown-files t)
    (display-line-numbers-mode 0)))
#+END_SRC
** customized util functions & bindings
*** find map of key binding
Find a key binding is in which map. From [[http://stackoverflow.com/questions/18801018/how-to-find-in-which-map-a-key-binding-is-from-programatically-in-emacs][stackoverflow]]
#+BEGIN_SRC emacs-lisp
(defun my/overlay-key-binding (key)
  "Keymaps can also be attached to overlays, like yasnippet.
   From: http://stackoverflow.com/questions/18801018/how-to-find-in-which-map-a-key-binding-is-from-programatically-in-emacs"
  (mapcar (lambda (keymap) (lookup-key keymap key))
          (cl-remove-if-not
           #'keymapp
           (mapcar (lambda (overlay)
                     (overlay-get overlay 'keymap))
                   (overlays-at (point))))))

(defun my/find-kbd (key)
  "From: http://stackoverflow.com/questions/18801018/how-to-find-in-which-map-a-key-binding-is-from-programatically-in-emacs"
  (interactive "kInput key: ")
  (message "%s"
   (list
    (my/overlay-key-binding key)
    (minor-mode-key-binding key)
    (local-key-binding key)
    (global-key-binding key))))
#+END_SRC
*** dos to unix
From [[http://www.emacswiki.org/emacs/DosToUnix][emacswiki]].
#+BEGIN_SRC emacs-lisp
(defun my/dos2unix ()
  "From: http://www.emacswiki.org/emacs/DosToUnix
Not exactly but it's easier to remember"
  (interactive)
  (set-buffer-file-coding-system 'unix 't))
#+END_SRC
*** path related
#+BEGIN_SRC emacs-lisp
(defun my/get-path ()
  ""
  (interactive)
  (let ((path
         (or buffer-file-name default-directory)))
    (message path)
    path))

(defun my/copy-path ()
  ""
  (interactive)
  (let ((path (my/get-path)))
    (if path
        (kill-new path))))
#+END_SRC
*** eval and replace
From: http://emacsredux.com/blog/2013/06/21/eval-and-replace/
#+BEGIN_SRC emacs-lisp
(defun my/eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))
#+END_SRC
*** revert all buffers
From: http://blog.plover.com/prog/revert-all.html
#+BEGIN_SRC emacs-lisp
(defun my/revert-all-buffers ()
  "Refreshes all open buffers from their respective files"
  (interactive)
  (let* ((list (buffer-list))
         (buffer (car list)))
    (while buffer
      (when (and (buffer-file-name buffer)
                 (not (buffer-modified-p buffer)))
        (set-buffer buffer)
        (revert-buffer t t t))
      (setq list (cdr list))
      (setq buffer (car list))))
  (message "Refreshed open files"))
#+END_SRC
*** open webstorm
#+BEGIN_SRC emacs-lisp
(defun my/run-cmd-on-current-file (command)
  "run a command on the current file"
  (shell-command
   (format "open -a %s %s" command
           (shell-quote-argument (buffer-file-name)))))

(defun my/open-webstorm ()
  (interactive)
  (my/run-cmd-on-current-file "webstorm"))

;; (my/set-key-bindings 'global-set-key '(("C-<f9>" my/open-webstorm)))
#+END_SRC
*** idle
- ref: https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-utils.el
#+begin_src emacs-lisp
(defvar my/disable-idle-timer nil
  "Function passed to `my/run-with-idle-timer' is run immediately.")

(defun my/run-with-idle-timer (seconds func)
  "After SECONDS, run function FUNC once."
  (cond
   (my/disable-idle-timer
    (funcall func))
   (t
    (run-with-idle-timer seconds nil func))))
#+end_src
** Misc
*** Backup Files
#+BEGIN_SRC emacs-lisp
(setq-default make-backup-files nil)
#+END_SRC
*** Narrow
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+END_SRC
*** Delete Selection Mode
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
*** Sentence End Double Space
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
*** Uniquify Buffer Name
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+END_SRC
*** Diff
#+BEGIN_SRC emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq diff-switches "-u")
#+END_SRC
*** Save Place
#+BEGIN_SRC emacs-lisp
(setq save-place-file (concat user-emacs-directory "places"))
#+END_SRC
*** Daemon Server
#+BEGIN_SRC emacs-lisp
(setq server-name "emacs-server")
(server-start)
#+END_SRC
*** TODO exec-path-from-shell
#+BEGIN_SRC emacs-lisp :tangle no
(if (package-installed-p 'exec-path-from-shell)
    (progn
     (require 'exec-path-from-shell)
     (cond
      ((string-equal system-type "windows-nt")
       ;; windows
       (progn
         (exec-path-from-shell-initialize)))
      ((string-equal system-type "darwin")
       ;; mac os x
       (progn
         (exec-path-from-shell-initialize)))))
  (message "exec-path-from-shell not installed"))
#+END_SRC
*** Default major mode
#+BEGIN_SRC emacs-lisp
(setq default-major-mode 'text-mode)
#+END_SRC
*** auto reload
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
*** electric pair
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(defun my/inhibit-electric-pair (char)
  (minibufferp))
(setq electric-pair-inhibit-predicate #'my/inhibit-electric-pair)
#+END_SRC
* key binding
** switch C-c & C-g
#+BEGIN_SRC emacs-lisp
(keyboard-translate ?\C-c ?\C-g)
(keyboard-translate ?\C-g ?\C-c)
#+END_SRC
** set key bindings function
#+BEGIN_SRC emacs-lisp
(defun my/set-key-bindings (action bind-list &optional map)
  "Set key bindings. 'bind-list' is 2-D list."
  (dolist (pair bind-list)
    (if (null map)
	(funcall action (eval `(kbd ,(nth 0 pair))) (nth 1 pair))
      (funcall action map (eval `(kbd ,(nth 0 pair))) (nth 1 pair)))))
#+END_SRC
** global keys
#+BEGIN_SRC emacs-lisp
(my/set-key-bindings
 'global-set-key
 '(
   ("C-?" help-command)
   ;;("C-x b" list-buffers)
   ("C-c C-c" comment-or-uncomment-region)
   ))
(global-set-key [(hyper c)] 'kill-ring-save)
(global-set-key [(hyper v)] 'yank)
#+END_SRC
** mac key
#+BEGIN_SRC emacs-lisp
(cond
 ((string-equal system-type "windows-nt")
  ;; windows
  (progn
    ))
 ((string-equal system-type "darwin")
  ;; mac os x
  (progn
    ;; (setq mac-option-key-is-meta t)
    ;; (setq mac-command-key-is-meta nil)

    ;; works for Emacs Mac Port: https://github.com/railwaycat/homebrew-emacsmacport
    ;; switch key https://gist.github.com/railwaycat/3498096
    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'hyper)
    ))
 ((string-equal system-type "gnu/linux")
  (message "linux")
  (progn
    (defconst my/system-include-dirs nil))))
#+END_SRC
** evil
- github: https://github.com/emacs-evil/evil
- doc: https://evil.readthedocs.io/en/latest/index.html
#+begin_src emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-Y-yank-to-eol t)
  (setq evil-shift-width 2)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h")
    'evil-delete-backward-char-and-join)
  (define-key evil-replace-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-replace-state-map (kbd "C-h")
    'evil-delete-backward-char-and-join)
  ;(define-key evil-insert-state-map (kbd "C-n") nil)
  (define-key evil-normal-state-map (kbd "C-.") nil)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;; https://evil.readthedocs.io/en/latest/settings.html#the-initial-state
  ;; config initial-state
  ;;  - 'normal
  ;;  - 'insert
  ;;  - 'emacs
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  ;; don't use evil in term-mode
  ;; (evil-set-initial-state 'term-mode 'emacs)
  )
#+end_src
** evil-collection
https://github.com/emacs-evil/evil-collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init)
  ;; (setq evil-collection-term-sync-state-and-mode-p nil)
  )
#+end_src
** which-key
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.6))
#+end_src
** general leader
#+begin_src emacs-lisp
(use-package general
  :after evil which-key
  :config
  (general-create-definer my/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-M-SPC")
  )
#+end_src
** my/leader-keys
#+begin_src emacs-lisp
(my/leader-keys
  ;; x
  "x" '(:ignore t :which-key "x")
  "xf" 'find-file
  "x/" 'find-file-other-window
  ;;"xb" 'switch-to-buffer
  ;; consult-buffer shortcut
  ;;   b<spc> Buffers
  ;;   <spc> Hidden buffers
  ;;   *<spc> Modified buffers
  ;;   f<spc> files
  ;;   r<spc> file registers
  ;;   m<spc> bootmarks
  ;;   p<spc> project
  "xb" 'consult-buffer
  "xp" 'consult-projectile
  "xk" 'kill-buffer
  "xs" 'save-buffer
  "xc" 'save-buffers-kill-terminal
  "xg" 'save-buffers-kill-terminal

  ;; x5
  "x5" '(:ignore t :which-key "x5")
  "x52" 'make-frame-command

  ;; h
  "h" '(:ignore t :which-key "help")
  "hk" 'describe-key
  "hf" 'describe-function
  "hv" 'describe-variable
  "hm" 'describe-mode
  "hb" 'describe-bindings
  )
(my/leader-keys
  "p" '(:ignore t :which-key "projectile")
  "pp" 'consult-projectile
  )
(my/leader-keys
  "v" '(:ignore t :which-key "vertico")
  "vl" 'consult-line
  "vg" 'consult-grep
  "vG" 'consult-git-grep
  "vr" 'consult-ripgrep
  "vy" 'consult-yank-pop
  "vm" 'consult-mark
  )
(my/leader-keys
  "o" '(:ignore t :which-key "org")

  "oh" 'consult-org-heading

  "oi" 'org-insert-structure-template
  "os" 'org-edit-special
  "oe" 'org-edit-src-exit

  "ob" 'org-backward-heading-same-level
  "of" 'org-forward-heading-same-level
  "on" 'outline-next-visible-heading
  "op" 'outline-previous-visible-heading
  "ou" 'outline-up-heading
  )
#+end_src
** jump (avy)
#+BEGIN_SRC emacs-lisp
(use-package avy
  :after general
  :config
  (my/leader-keys
    ;; avy jump
    "j"  '(:ignore t :which-key "jump")
    "jj"  'avy-goto-word-1
    "jk"  'avy-goto-word-0
    "jf"  'avy-goto-char-2
    "jg"  'avy-goto-char
    "jl"  'avy-goto-line)
  )
#+END_SRC
* more ui
** doom-modeline
https://github.com/seagle0128/doom-modeline
#+begin_src emacs-lisp
;; Install icons for doom
;; Run M-x all-the-icons-install-fonts to install
(use-package all-the-icons
  :if (display-graphic-p))

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom
  ((doom-modeline-height 15)
   ))
#+end_src
** doom-theme
#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-vibrant t))
#+end_src
** line number
#+begin_src emacs-lisp
(global-display-line-numbers-mode)
;; (setq display-line-numbers-type 'visual)
(setq display-line-numbers-type t)
(dolist (mode '(org-mode-hook
                shell-mode-hook
                term-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** parenthesis
#+begin_src emacs-lisp
(show-paren-mode)
(setq show-paren-style 'mixed)
#+end_src
** rainbow-delimiters
https://github.com/Fanael/rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** font
:PROPERTIES:
:header-args: :tangle no
:END:
*** default font
#+BEGIN_SRC emacs-lisp
(cond
 ;; windows
 ((string-equal system-type "windows-nt")
  (progn
    (set-default-font "Consolas:pixelsize=14:antialias=subpixel")
    (set-fontset-font "fontset-default"
		      'han '("Microsoft Yahei" . "unicode-bmp"))
    (add-to-list 'default-frame-alist
		 '(font . "Consolas:pixelsize=14:antialias=subpixel"))))
 ((string-equal system-type "darwin")
  (progn
    (setq default-directory "~/")
    (if (display-graphic-p)
        (set-fontset-font
         t 'han (font-spec :name "Songti SC")))))
 ;; linux
 ((string-equal system-type "gnu/linux")))
#+END_SRC
** recent files
#+begin_src emacs-lisp
(use-package recentf
  :init (recentf-mode)
  :config
  (setq recentf-max-saved-items 200
        recentf-max-menu-items 15)
  )
#+end_src
** emacs default auto save
#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/questions/17210/how-to-place-all-auto-save-files-in-a-directory
;; https://superuser.com/questions/131538/can-i-create-directories-that-dont-exist-while-creating-a-new-file-in-emacs
(let ((my-backup-directory "~/.emacs-saves/"))
  (unless (file-exists-p my-backup-directory)
    (message "creating backup dir: %s" my-backup-directory)
    (make-directory my-backup-directory t))
  (setq backup-directory-alist
        `((".*" . ,my-backup-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,my-backup-directory t)))
  )
#+end_src
** auto save
- refs
  - https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-misc.el
  - https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-autoload.el
#+begin_src emacs-lisp
(defun setup-auto-save ()
  (autoload 'auto-save-enable "auto-save" "" t)
  (with-eval-after-load 'auto-save
    ;; (push 'my-file-too-big-p auto-save-exclude)
    ;; (push 'my-check-major-mode-for-auto-save auto-save-exclude)
    (setq auto-save-idle 2)
    (setq auto-save-slient t))
  (my/run-with-idle-timer 2 #'auto-save-enable))
(setup-auto-save)
#+end_src
* vertico
** vertico
- https://github.com/minad/vertico
- https://systemcrafters.cc/emacs-tips/streamline-completions-with-vertico/
#+begin_src emacs-lisp
(use-package vertico
  :bind (:map vertico-map
              ("C-n" . vertico-next)
              ("C-p" . vertico-previous))
  :init
  (vertico-mode)
  :custom
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

(use-package savehist
  :init
  (savehist-mode))
#+end_src
** marginalia
- https://github.com/minad/marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators
   '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src
** orderless
- https://github.com/oantolin/orderless
#+begin_src emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** embark
- https://github.com/oantolin/embark
#+begin_src emacs-lisp
(use-package embark
  :quelpa (embark :fetcher github :repo "oantolin/embark")
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ;; executes the default action at point, good alternative: M-.
   ("C-;" . embark-dwim)
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  ;;(setq embark-prompter 'embark-completing-read-prompter)
  (setq embark-prompter 'embark-keymap-prompter)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :after embark consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** consult
- https://github.com/minad/consult
*** config
#+begin_src emacs-lisp
(use-package consult
  :quelpa (consult :fetcher github :repo "minad/consult")
  :bind (
         :map minibuffer-local-map
              ("M-s" . consult-history)
              ("C-r" . consult-history)
         )
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  (setq consult-preview-key "C-l")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)

   consult-ripgrep
   consult-git-grep
   consult-grep
   consult-line
   consult-xref
   :preview-key '(:debounce 0.4 any)

   ;; ; use C-l to preview
   ;; consult-bookmark
   ;; consult-recent-file
   ;; consult--source-bookmark
   ;; consult--source-file-register
   ;; consult--source-recent-file
   ;; consult--source-project-recent-file
   ;; :preview-key "C-l"
   )
  (defalias 'consult-line-thing-at-point 'consult-line)
  (consult-customize
   consult-line
   :initial
   ;; use region text if selected
   (if (use-region-p)
       (let ((s (buffer-substring-no-properties (mark) (point))))
         (deactivate-mark)
         s))
   consult-line-thing-at-point
   :initial (thing-at-point 'symbol))

  ;; Optionally configure the narrowing key.
  (setq consult-narrow-key "<") ;; "C-+" also works

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;; 4. projectile.el (projectile-project-root)
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)

  )
#+end_src
*** consult-buffer narrowing keys
|-------+------------------|
| key   | desc             |
|-------+------------------|
| b     | buffers          |
| <spc> | hidden buffers   |
| =*=   | modified buffers |
| f     | files            |
| r     | file registers   |
| m     | bootmarks        |
| p     | project          |
|-------+------------------|
*** key functions
|--------------------+------|
| function           | desc |
|--------------------+------|
| Consult-history    |      |
| consult-buffer     |      |
| consult-bookmark   |      |
| consult-yank-pop   |      |
| consult-goto-line  |      |
| consult-outline    |      |
| consult-mark       |      |
| consult-flymake    |      |
| consult-imenu      |      |
|                    |      |
| consult-find       |      |
| consult-locate     |      |
|                    |      |
| consult-grep       |      |
| consult-git-grep   |      |
| consult-ripgrep    |      |
|                    |      |
| consult-line       |      |
| consult-line-multi |      |
|--------------------+------|
** consult-projectile
- https://gitlab.com/OlMon/consult-projectile
#+begin_src emacs-lisp
(use-package consult-projectile
  :quelpa
  (consult-projectile :fetcher gitlab :repo "OlMon/consult-projectile"))
#+end_src
* projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :custom (;;(projectile-completion-system 'ivy) switch to vertico
           )
  :bind-keymap ("C-x p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/dev")
    (setq projectile-project-search-path '("~/dev")))
  ;; (setq projectile-switch-project-action #'projectile-dired)
  :config
  (projectile-mode)
  )
#+end_src
** useful commands
|----+---------------------------|
| p  | projectile-switch-project |
| f  | projectile-find-file      |
| sr | projectile-ripgrep        |
| sg | projectile-grep           |
|----+---------------------------|
* company
- user manual: http://company-mode.github.io/manual/index.html
- useful functions
  - company-show-location
  - company-show-doc-buffer
  - company-diag
  - company-other-backend
  - company-begin-backend
  - company-capf
  - company-yasnippet
- useful variables
  - company-backends
** config
#+begin_src emacs-lisp
(use-package company
  ;; :after lsp-mode
  ;; :hook (lsp-mode . company-mode)
  :bind (:map evil-insert-state-map
         ("C-n" . company-complete)
         :map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous)
         :map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous))
  :custom
  (company-minimum-prefix-length 3)
  (company-idle-delay 0.0)
  (company-show-numbers t)
  (company-tootip-align-annotations t)
  (campany-dabbrev-downcase nil)
  :config
  (global-company-mode 1))
#+end_src
* flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck)
#+END_SRC
* org-mode
** init
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(use-package org
  :init
  ;; fold everything at the beginning
  (setq org-startup-folded t)
  ;; hide = and *
  (setq org-hide-emphasis-markers t)
  )
#+END_SRC
** basic config
#+BEGIN_SRC emacs-lisp
(defun my/org-mode-setup ()
  (org-indent-mode t)
  (flyspell-mode-off)
  (setq org-src-fontify-natively t)
  (setq org-edit-src-content-indentation 0)
  ;; (setq org-infojs-options my/default-org-infojs-options)
  (setq org-export-html-use-infojs t) ; alternative: when-configured, nil
  (setq org-latex-preview-ltxpng-directory "/tmp/ltxpng/")
  )
(add-hook 'org-mode-hook 'my/org-mode-setup)
#+END_SRC
** org-appear
When =org-hide-emphasis-markers= is turned on. It temporarily shows the
emphasis markers around certain markup elements when you place your
cursor inside of them.
#+begin_src emacs-lisp
;; function to show in evil insert mode
(defun my/org-setup-appear ()
  (org-appear-mode)
  (add-hook 'evil-insert-state-entry-hook
            #'org-appear-manual-start
            nil
            t)
  (add-hook 'evil-insert-state-exit-hook
            #'org-appear-manual-stop
            nil
            t)
  )
(use-package org-appear
  :after org
  ;; :init
  ;; (setq org-appear-trigger 'manual)
  ;; (setq org-appear-autolinks t)
  :hook
  ;; (org-mode . my/org-setup-appear)
  (org-mode . org-appear-mode)
  )
#+end_src
** toc-org
Automatically generate a table of contents for org files.
Use =org-set-tags-command= (C-c C-q) to add a TOC tag.
Use TOC_2 tag to sets the max depth to 2.
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :init
  (add-hook 'org-mode-hook #'toc-org-enable))
#+END_SRC
** initial visibility
*** per-file setting
#+begin_src org :tangle no
#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: show2levels
#+STARTUP: show3levels
#+STARTUP: show4levels
#+STARTUP: show5levels
#+STARTUP: showeverything
#+end_src
*** per entry setting
Set =VISIBILITY= property to =folded=, =children=, =content= or =all=.
** keys
     ;; "C-c C-b" org-backward-heading-same-level
     ;; "C-c C-f" org-forward-heading-same-level
     ;; "C-c C-n" outline-next-visible-heading
     ("C-c C-p" outline-previous-visible-heading)
     ;; "C-c C-j" org-goto

     ;; ("M-<left>" org-metaleft)
     ;; ("M-<righ>" org-metaright)
     ;; ("M-<up>" org-metaup)
     ;; ("M-<down>" org-metadown)

     ;; ("M-S-<left>" org-shiftmetaleft)
     ;; ("M-S-<right>" org-shiftmetaright)
     ;; ("M-S-<up>" org-shiftmetaup)
     ;; ("M-S-<down>" org-shiftmetadown)

     ;; "M-h" org-mark-element

     ;; ("C-c C-f" org-kill-note-or-show-branches) ;; used to be 'C-c C-k'

     ("C-<tab>" org-cycle)
     ("C-S-<tab>" org-shifttab)
     ("C-c RET" nil)
* TODO org-gtd
** add agenda files into =~/.emacs.d/init.el=
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-files
      '("~/path/to/todo/todo.org"))

(setq org-agenda-tetra
      "~/path/to/todo/tetra.org")
#+END_SRC
** agenda-hook
#+BEGIN_SRC emacs-lisp
(defun my/org-agenda-mode-hook-func ()
  (my/set-key-bindings
   'define-key
   '(
     ("j" org-agenda-next-line)
     ("k" org-agenda-previous-line)
     ("J" org-agenda-next-item)
     ("K" org-agenda-previous-item)
     ("g" org-agenda-goto-date)
     ("G" org-agenda-clock-goto)
     )
   org-agenda-mode-map))
(add-hook 'org-agenda-mode-hook 'my/org-agenda-mode-hook-func)
#+END_SRC
** custom agenda commands
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("d" "Daily Agenda and All TODOs"
         ((agenda "" ((org-agenda-ndays 1)))
          (alltodo ""
                   ((org-agenda-skip-function
                     '(org-agenda-skip-entry-if
                       'todo '("TODO" "HOLD" "MISS")))
                    (org-agenda-overriding-header "In Progress Tasks:")))
          (alltodo ""
                   ((org-agenda-skip-function
                     '(or (org-agenda-skip-entry-if 'scheduled 'deadline)
                          (org-agenda-skip-entry-if 'todo '("HOLD"))))
                    (org-agenda-overriding-header "Todo Tasks without time:"))))
         ;; ((org-agenda-compact-blocks t))
         )
        ("h" "All Holds"
         ((alltodo ""
                   ((org-agenda-skip-function
                     '(org-agenda-skip-entry-if
                       'todo '("TODO" "PROG" "MISS")))
                    (org-agenda-overriding-header "In Progress Tasks:")))))
        ("t" "Tetrascience"
         ((agenda ""
                  ((org-agenda-files `(,org-agenda-tetra))
                   (org-agenda-ndays 1)))
          (alltodo ""
                   ((org-agenda-files `(,org-agenda-tetra))
                    (org-agenda-skip-function
                     '(org-agenda-skip-entry-if
                       'todo '("TODO" "HOLD" "MISS")))
                    (org-agenda-overriding-header "In Progress Tasks:")))
          (alltodo ""
                   ((org-agenda-files `(,org-agenda-tetra))
                    (org-agenda-skip-function
                     '(or (org-agenda-skip-entry-if 'scheduled 'deadline)
                          (org-agenda-skip-entry-if 'todo '("HOLD"))))
                    (org-agenda-overriding-header "Todo Tasks without time:")))))))
#+END_SRC
** todo keyword faces
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      '(("TODO" . org-warning)
        ("IN-PROGRESS" . "yellow")
        ("PROG" . "yellow")
        ("PROGRESS" . "yellow")
        ("DONE" . "green")
        ("HOLD" . "red")
        ("CANCELLED" . "purple1")))
#+END_SRC
** deadline warning days
#+BEGIN_SRC emacs-lisp
(setq org-deadline-warning-days 10)
#+END_SRC
* shell [0/2]
** term mode
*** config
#+BEGIN_SRC emacs-lisp
(use-package term
  :config
  (setq explicit-shell-file-name "bash")

  ;; make sure C-c C-p / C-c C-n jump to the right place
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  (setq scroll-margin 0)
  ;; :bind (:map term-raw-map
  ;;        ("C-b" . scroll-up-command)
  ;;        :map company-active-map
  ;;        ("C-n" . company-select-next)
  ;;        ("C-p" . company-select-previous)
  ;;        :map company-active-map
  ;;        ("C-n" . company-select-next)
  ;;        ("C-p" . company-select-previous))
  ;;  '(("C-b" scroll-up-command)
  ;;    ("C-f" scroll-down)
  ;;    ("C-y" term-paste)
  ;;    ("s-v" term-paste)
  ;;    ("M-x" nil)
  ;;    ("C-u" universal-argument)
  ;;    ("C-c C-y" term-interrupt-subjob)
  ;;    )
  )
#+End_SRC
*** keys
|---------+------------|
| key     | desc       |
|---------+------------|
| C-c C-k | char-mode  |
| C-c C-j | line-mode  |
| C-c C-p | go back    |
| C-c C-n | go forward |
|---------+------------|
** tm function
#+begin_src emacs-lisp
(defun tm ()
  "start bash term with a different name"
  (interactive)
  (let ((sh-name "bash")
        (bf-name "tm")
        )
    (if t ;;current-prefix-arg
        (setq bf-name
              (read-from-minibuffer "name (tm): " bf-name)))
    (if (or (not bf-name)
            (= (length bf-name) 0))
        (setq bf-name "*tm*"))
    (setq bf-name (generate-new-buffer-name bf-name))
    (set-buffer (make-term bf-name sh-name))
    (term-mode)
    (term-char-mode)
    (switch-to-buffer (concat "*" bf-name "*"))))
#+end_src
** sh mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("/\\.bash_[^/]*\\'" . sh-mode))
#+END_SRC
** TODO shell mode
#+BEGIN_SRC emacs-lisp
(defun my/shell-mode-hook-func ()
  (my/set-key-bindings
   'local-set-key
   '(
     ;; ("C-d" my/shell-kill)
     ("C-M-l" nil)
     ;;("C-c h" comint-history-isearch-backward)
     ;;("M-s" comint-history-isearch-search)
     ("C-c h" comint-history-isearch-backward-regexp)

     ;;("C-n" comint-next-input)
     ;;("C-p" comint-previous-input)
     ("C-M-n" comint-next-matching-input-from-input)
     ("C-M-p" comint-previous-matching-input-from-input)

     ("C-c C-b" shell-backward-command)
     ("C-c C-f" shell-forward-command)
     ("C-c C-n" comint-next-prompt)
     ("C-c C-p" comint-previous-prompt)

     )
   ;;shell-mode-map
   )
  (evil-define-key
    'insert shell-mode-map (kbd "C-n") 'comint-next-input)
  (evil-define-key
    'insert shell-mode-map (kbd "C-p") 'comint-previous-input)
  )
(add-hook 'shell-mode-hook 'my/shell-mode-hook-func)
#+END_SRC
** TODO sh function
#+BEGIN_SRC emacs-lisp
(defun sh ()
  "start-shell"
  (interactive)
  (let (bf-name)
    (setq bf-name
          (read-from-minibuffer "Buffer (*shell*): " bf-name))
    (if (or (not bf-name)
            (= (length bf-name) 0))
        (shell)
      (shell bf-name))))
#+END_SRC
* text-mode
** auto fill
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC
* TODO lsp (deprecated)
:PROPERTIES:
:header-args: :tangle no
:END:
- https://emacs-lsp.github.io/lsp-mode/
- https://emacs-lsp.github.io/lsp-mode/page/languages/
- https://langserver.org/
** config
#+begin_src emacs-lisp
(defun my/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . my/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :after lsp)

#+end_src
** dap
#+begin_src emacs-lisp
(use-package dap-mode
  :after lsp-mode
  :config (dap-auto-configure-mode))
#+end_src
* typescript
** config
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.\\(js\\|jsx\\|ts\\)\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+end_src
** manual
- install js/ts server
- install eslint globally
- install eslint server by using M-x lsp-install-server
* json-mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode)
#+END_SRC
* java
** links
- lsp-java
  - https://emacs-lsp.github.io/lsp-java/
  - https://xpressrazor.wordpress.com/2020/11/04/java-programming-in-emacs/
- Eclipse jdt
  - https://github.com/eclipse/eclipse.jdt.ls/
- Eclipse configuration files
  - https://www.ibm.com/docs/en/spm/7.0.4?topic=eclipse-configuration-files
** lsp-java
#+begin_src emacs-lisp
(use-package lsp-java 
  :config (add-hook 'java-mode-hook 'lsp-deferred))
#+end_src
* TODO dired
** key binding
#+BEGIN_SRC emacs-lisp
(defun my/dired-key-binding ()
  (my/set-key-bindings
   'define-key
   '(
     ("j" dired-next-line)
     ("k" dired-previous-line)
     ("r" revert-buffer)
     ("C-t" set-mark-command))
   dired-mode-map))
(add-hook 'dired-mode-hook 'my/dired-key-binding)
#+END_SRC
** Listing Parameters
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alnoh")
(defun my/set-ls (parameter)
  "Set ls parameter in dired mode"
  (interactive "s")
  (setq dired-listing-switches parameter))
#+END_SRC
* folding
** main code
#+BEGIN_SRC emacs-lisp
(setq default-label 'cycle-fold)

(defun goto-list (count depth)
  (condition-case ex
      (goto-char (scan-lists (point) count depth))
    (error
      (message "Error in goto-list: %s" ex)
      nil)))

(defun scan-lists-safe (from count depth &optional default)
  (condition-case ex
      (scan-lists from count depth)
    (error
      (message "Error in scan-lists: %s" ex)
      default)))

(defun get-bol (pos)
  (save-excursion (goto-char (or pos (point)))
                  (beginning-of-line)
                  (point)))

(defun get-eol (pos)
  (save-excursion (goto-char (or pos (point)))
                  (end-of-line)
                  (point)))

(defun my/filter (condp lst)
  (delq nil
        (mapcar (lambda (x) (and (funcall condp x) x)) lst)))

(defun label->tag (label)
  (intern (concat "tag-" (symbol-name (or label default-label)))))

(defun create-overlay (start end &optional label val)
  (let ((o (make-overlay start end))
        (tag (label->tag label)))
    ;; (message "tag: %s" tag)
    (if val
        (overlay-put o tag val)
      (overlay-put o tag t))
    (overlay-put o 'evaporate t)
    (overlay-put o 'invisible t)
    (overlay-put o 'display `(:string "..."))
    (overlay-put
     o 'isearch-open-invisible
     (lambda (ov)
       (message "open invisible")
       (delete-overlay ov)))
    (overlay-put
     o 'isearch-open-invisible-temporary
     (lambda (ov invisible)
       (overlay-put ov 'invisible invisible)
       (overlay-put ov 'display (and invisible `(:string "...")))))
    o))

(defun get-overlays (start end &optional label val)
  (let ((tag (label->tag label))
        (os (overlays-in start end)))
    (if (null tag)
        os
      (my/filter (lambda (o)
                   (if (null val)
                       (overlay-get o tag)
                     (equal (overlay-get o tag) val)))
                 os))))

(defun delete-overlays (start end &optional label val)
  (dolist (o (get-overlays start end label val))
    (delete-overlay o)))

(defun cal-fold-region-at (&optional pos)
  (interactive)
  (let* ((start (or pos (point)))
         (eol (get-eol start))
         (end (scan-lists start 1 0)))
    (if (> (- end eol) 1)
        (list (cons :start eol)
              (cons :end (1- end))))))

(defun cal-fold-region-line (&optional pos)
  (interactive)
  (let* ((p (or pos (point)))
         (bol (get-bol p))
         (eol (get-eol p))
         (end (scan-lists-safe bol 1 0 (min (1+ bol) eol))))
    (while (< end eol)
      (setq end (scan-lists-safe end 1 0 (min (1+ end) eol))))
    (if (> end eol)
        (cal-fold-region-at (scan-lists end -1 0)))))

(defun current-fold-state (&optional pos)
  (interactive)
  (let ((range (cal-fold-region-line pos)))
    (if range
        (let* ((start (cdr (assoc :start range)))
               (end (cdr (assoc :end range)))
               (os (get-overlays start end)))
          ;; (message "%s %s %s" start end os)
          (if os
              (if (and (null (cdr os))
                       (equal start (overlay-start (car os)))
                       (equal end (overlay-end (car os))))
                  :folded
                :mis-folded)
            :unfolded))
      :no-fold)))

(defun fold-at (&optional pos)
  (interactive)
  (let ((range (cal-fold-region-at pos)))
    (if range
        (create-overlay (cdr (assoc :start range))
                        (cdr (assoc :end range))))))

(defun fold-line (&optional pos)
  (interactive)
  (let ((range (cal-fold-region-line pos)))
    (if range
        (create-overlay (cdr (assoc :start range))
                        (cdr (assoc :end range))))))

(defun fold-at-end (&optional pos)
  (interactive)
  (save-excursion
    (goto-list -1 0)
    (fold-at (point))))

(defun unfold-line (&optional pos)
  (interactive)
  (let ((range (cal-fold-region-line pos)))
    (if range
        (delete-overlays (cdr (assoc :start range))
                         (cdr (assoc :end range))))))

(defun fold-children (&optional pos)
  (interactive)
  (save-excursion
    (let ((range (cal-fold-region-line pos)))
      (when range
        (goto-char (cdr (assoc :start range)))
        (while (goto-list 1 0)
          (fold-at-end))))))

(defun toggle-fold-line (&optional pos)
  (interactive)
  (let ((status (current-fold-state)))
    (cond
     ((eq status :no-fold) nil)
     ((eq status :unfolded) (fold-line pos))
     ((eq status :mis-folded)
      (unfold-line pos)
      (unless (eq last-command 'toggle-fold-line)
        (fold-line pos)))
     ((eq status :folded)
      (unfold-line pos)
      (fold-children pos))
     (t :default))))

(defun toggle-fold-all ()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (if (and (eq last-command 'toggle-fold-all)
             (get-overlays (point-min) (point-max)))
        (delete-overlays (point-min) (point-max))
      (progn (delete-overlays (point-min) (point-max))
             (while (goto-list 1 0)
               (fold-at-end))))))
#+END_SRC
** key binding
#+BEGIN_SRC emacs-lisp
(my/set-key-bindings
 'global-set-key
 '(("C-<tab>" toggle-fold-line)
   ("C-S-<tab>" toggle-fold-all)))
#+END_SRC
** example
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
'(a b c
    (d
     e)
    (f g)
    (h
     (i j))
    ((k l
        (m n)
        (p q) (r s))
     o))
#+END_SRC
** test
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
(message "****************** start *******************")
(message "label->tag: %s" (label->tag 'test))
(message "label->tag === 'tag-test: %s" (eq (label->tag 'test) 'tag-test))
(message "delete-overlays: %s" (delete-overlays 1 100 'test))
(message "create-overlay: %s" (create-overlay 1 10 'test))
(message "get-overlays: %s" (get-overlays 1 100 'test))
(message "delete-overlays: %s" (delete-overlays 1 100 'test))
(message "get-overlays: %s" (get-overlays 1 100 'test))
(message "****************** end *******************")

(overlay-put o 'face `(:background "grey50"))
(overlay-put o 'face nil)
(overlay-put o 'display `(:string "(...)"))
(overlay-put o 'display nil)
#+END_SRC
** todo
- minor mode
- 'helm-after-action-hook
- 'helm-after-persistent-action-hook
- 'occur-mode-find-occurrence-hook
- bug of [{\n},{\n},{\n}]
- lightweight-macro
* TODO graphviz dot mode
#+BEGIN_SRC emacs-lisp
(defun my/graphviz-mode ()
  ""
  (setq graphviz-dot-indent-width 2)
  ;; (setq graphviz-dot-auto-indent-on-semi nil)
  )
(add-hook 'graphviz-dot-mode-hook 'my/graphviz-mode)
#+END_SRC
* html
** web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode "\\.\\(jsx\\|html\\|hbs\\)\\'"
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-attr-indent-offset 2)
  (setq web-mode-style-padding 2)
  (setq web-mode-script-padding 2)
  (setq web-mode-block-padding 0)
  (set-face-attribute 'web-mode-html-tag-face nil :foreground "SkyBlue1")
  (setq web-mode-enable-current-element-highlight t)
  (set-face-attribute 'web-mode-current-element-highlight-face nil :background "honeydew4")
  (setq web-mode-enable-current-column-highlight nil)
  (setq web-mode-enable-sexp-functions t)
  ;; (setq web-mode-enable-auto-quoting nil)
  ;; (setq web-mode-enable-auto-indentation nil)
  )
#+END_SRC
* TODO imenu
#+BEGIN_SRC emacs-lisp
(setq imenu-auto-rescan nil)
#+END_SRC
* TODO js
** node-modules-path-setup
From: https://github.com/codesuki/add-node-modules-path
#+BEGIN_SRC emacs-lisp
(defun my/node-modules-path-setup ()
  (defvar add-node-modules-path-debug nil
    "Enable verbose output when non nil.")

  (defun add-node-modules-path ()
    "Search the current buffer's parent directories for `node_modules/.bin`.
If it's found, then add it to the `exec-path'."
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (path (and root
                      (expand-file-name "node_modules/.bin/" root))))
      (if root
          (progn
            (make-local-variable 'exec-path)
            (add-to-list 'exec-path path)
            (when add-node-modules-path-debug
              (message (concat "added " path  " to exec-path"))))
        (when add-node-modules-path-debug
          (message (concat "node_modules not found in " root))))))
  (eval-after-load 'js-mode
    '(add-hook 'js-mode-hook #'add-node-modules-path))
  (eval-after-load 'js2-mode
  '(add-hook 'js2-mode-hook #'add-node-modules-path))
  (eval-after-load 'web-mode
    '(add-hook 'web-mode-hook #'add-node-modules-path)))
(my/node-modules-path-setup)
#+END_SRC
** js-mode (deprecated to typescript)
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
(defun my/js-setup ()
  (setq-default js-indent-level 2))
(my/js-setup)
#+END_SRC
** js2-mode (deprecated to typescript)
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
(defun my/js2-setup ()
  ;; js2-mode-hide-comments
  ;; js2-mode-hide-element
  ;; js2-mode-hide-functions
  ;; js2-mode-hide-warnings-and-errors
  ;;
  ;; js2-mode-show-all
  ;; js2-mode-show-comments
  ;; js2-mode-show-element
  ;; js2-mode-show-functions
  ;; js2-mode-show-node
  ;;
  ;; js2-mode-toggle-element "C-c C-o"
  ;; js2-mode-toggle-hide-comments
  ;; js2-mode-toggle-hide-functions
  ;; js2-mode-toggle-warnings-and-errors
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  (setq-default js-indent-level 2)
  ;; this will hide errors & warnings
  (setq-default js2-mode-show-parse-errors nil)
  (setq-default js2-mode-show-strict-warnings nil)
  (setq-default js2-bounce-indent-p t)
  ;; (setq-default js2-strict-inconsistent-return-warning nil)
  (defun my/init-js ()
    ;; (electric-indent-mode -1)
    (my/set-key-bindings
     'local-set-key
     '()))
  (add-hook 'js2-mode-hook 'my/init-js))

;; (if (package-installed-p 'js2-mode)
;;     (my/js2-setup)
;;   (message "js2-mode not installed"))
#+END_SRC
* TODO spell
#+BEGIN_SRC emacs-lisp
(setq-default ispell-program-name "aspell")
#+END_SRC
* TODO tramp
#+BEGIN_SRC emacs-lisp :tangle no
(require 'tramp)
(setq tramp-default-method "scp")
;;(custom-set-variables '(tramp-verbose 6))
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+END_SRC
* TODO prettier
- https://github.com/prettier/prettier-emacs
- https://prettier.io/
#+BEGIN_SRC emacs-lisp :tangle no
(defun my/setup-prettier ()
  ;; (add-hook 'js2-mode-hook
  ;;           #'(lambda ()
  ;;               (if (executable-find "prettier")
  ;;                   (prettier-js-mode))))
  ;; (add-hook 'web-mode-hook
  ;;           #'(lambda ()
  ;;               (if (and (executable-find "prettier")
  ;;                        (buffer-file-name)
  ;;                        (string-match "\\.jsx?\\'" buffer-file-name))
  ;;                   (prettier-js-mode))))
  ;; (add-hook 'yaml-mode-hook
  ;;           #'(lambda ()
  ;;               (if (executable-find "prettier")
  ;;                   (prettier-js-mode))))
  (global-set-key [f8] 'prettier-js)
  )
;; (if (package-installed-p 'prettier-js)
;;     (my/setup-prettier)
;;   (message "prettier-js not installed"))
#+END_SRC
* TODO plantuml
#+begin_src emacs-lisp
;; use M-x plantuml-download-jar<RET> to download jar
;; use M-x plantuml-preview<RET> to preview
(defun my/plantuml-setup ()
  (setq plantuml-jar-path "~/dev/lib/plantuml.jar")
  (setq plantuml-default-exec-mode 'jar)
  (add-to-list
   'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  ;; add to org-mode
  (add-hook
   'org-mode-hook
   (lambda ()
     (add-to-list
      'org-src-lang-modes '("plantuml" . plantuml))))
  )
;; (if (package-installed-p 'plantuml-mode)
;;     (my/plantuml-setup)
;;   (message "plantuml-mode not installed"))
#+end_src
* todolist [0/3]
** TODO read a list of people with nice emacs config files
- https://github.com/zamansky/emacs.dz
** TODO toc-org
- https://github.com/snosov1/toc-org
** TODO magit
* License
My Emacs configurations written in Org mode.

Copyright (c) 2013-2018 Chunfeng Dai

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
